name: CI

on: [push]

permissions:
  contents: read

jobs:
  workspace-ci:
    name: Workspace CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 19.x, 20.x]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - run: corepack enable

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install
        # In a normal repo (not package-template), this would be:
        #   run: pnpm install --frozen-lockfile

      - name: Check for a changelog entry
        if: ${{ github.ref != 'refs/heads/prepare-release' }}
        run: pnpm run changelog:status:ci

      - name: Run CI checks
        run: pnpm run all:ci

      - name: Report test coverage to coveralls.io
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ github.token }}

  packages-ci:
    name: Packages CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-name: [node-library-template, react-library-template]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - run: corepack enable

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install
        # In a normal repo (not package-template), this would be:
        #   run: pnpm install --frozen-lockfile

      - name: Run CI checks for package
        run: |
          cd packages/${{ matrix.package-name }}
          pnpm run all:ci

  apps-ci:
    name: Apps CI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app-path:
          [
            demo-apps/hello-world-cli,
            demo-apps/hello-world-ui,
            test-apps/cra5-react17,
            test-apps/nextjs13-playwright,
            test-apps/remix-playwright,
            test-apps/vite4-react18-swc,
          ]

    steps:
      - uses: actions/checkout@v3

      - name: Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - run: corepack enable

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies without lockfile
        run: |
          rm -f pnpm-lock.yaml
          cd ${{ matrix.app-path }}
          pnpm install

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run CI checks for demo-app
        run: pnpm run all:ci
